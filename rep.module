<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Path\AliasStorageInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuLinkTreeInterface;

/**
 * Implements hook_install().
 */
function rep_install() {
  // Define the schema for user_tracking table.
  $schema['user_tracking'] = [
    'description' => 'Stores user session history',
    'fields' => [
      'uid' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'User ID',
      ],
      'previous_url' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Previous URL',
      ],
      'current_url' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Current URL',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Timestamp when the entry was created',
      ],
    ],
    'primary key' => ['uid', 'current_url'],
  ];

  // Create the table.
  Database::getConnection()->schema()->createTable('user_tracking', $schema['user_tracking']);
}

/**
 * Implements hook_form_alter().
 */
function rep_form_alter(&$form, &$form_state, $form_id) {
  // Check if the form ID matches your configuration form.
  if ($form_id == 'rep_form_namespace' ||
      $form_id == 'rep_form_preferred_names' ||
      $form_id == 'rep_form_update_namespace') {
      // Remove the default "Save configuration" button.
    unset($form['actions']['submit']);
  }
}

/**
 * Implements hook_theme
 */
function rep_theme($existing, $type, $theme, $path)
{
    return [
        'list-page' => [
            'variables' => array(
                'items' => array(
                    'offset' => '',
                    'first' => '',
                    'last' => '',
                    'previous' => '',
                    'next' => '',
                    'links' => array(),
                    'title' => ''
                )
            )
        ],
    ];
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function rep_preprocess_block(&$variables) {
  // Add the core/drupal.dialog.ajax library.
  $variables['#attached']['library'][] = 'core/drupal.dialog.ajax';
  $attachments['#attached']['library'][] = 'rep/rep_js_css';
}

/**
 * Implements hook_help().
 */
function rep_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
    switch ($route_name) {
      case 'rep.help':
        return '<h2>This is the help content for the HAScO Semantics Package.</h2>';
    }
  }

/**
 * Implements hook_update_N().
 */
function rep_update_8001() {

  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/rep/list/instrument/_/_/1/12')->save();

}

/**
 * Ensure the sidebar first width setting is set to 3 cols.
 */
function rep_update_8002() {
  // Retrieve the editable configuration for the Bootstrap Barrio theme.
  $config = \Drupal::configFactory()->getEditable('bootstrap_barrio.settings');

  // Get the current value of the sidebar first width setting.
  $current_value = $config->get('bootstrap_barrio_sidebar_first_width');

  // Check if the current value is not equal to 3.
  if ($current_value != 3) {
    // Update the setting to 3.
    $config->set('bootstrap_barrio_sidebar_first_width', 3)->save();

    // Optionally, add a message to inform the administrator about the change.
    \Drupal::messenger()->addMessage(t('The Sidebar First Width has been updated to 3 cols.'));
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function rep_menu_links_discovered_alter(&$links) {
  $target_links = [
    'reviewer.top_level',
    'reviewer.response_options',
  ];

  foreach ($target_links as $link_key) {
    if (isset($links[$link_key])) {
      // Define o requisito de acesso personalizado.
      $links[$link_key]['requirements']['_custom_access_check'] = 'TRUE';
    }
  }

  $config = \Drupal::config('rep.settings');
  $sagres_enabled = $config->get('sagres_conf');
  // \Drupal::logger('rep')->notice('sagres_conf: ' . $sagres_enabled);
  $social_enabled = $config->get('social_conf');

  if ($sagres_enabled == 0) {
    $to_hide = [
      'rep.sagres',
      'rep.sagres_config',
      'rep.sagres_status',
    ];

    foreach ($links as $key => $link) {
      if ((isset($link['route_name']) && in_array($link['route_name'], [
              'rep.sagres.status_form',
              'rep.sagres.config_form'
          ])) || in_array($key, $to_hide)) {
          unset($links[$key]);
      }
    }
  }

  if ($social_enabled == 0) {
    $to_hide_social = [
      'rep.socialkg',
      'rep.social_config',
      'rep.social_status',
    ];

    foreach ($links as $key => $link) {
      if ((isset($link['route_name']) && in_array($link['route_name'], [
              'social.config_form',
              'social.status_form'
          ])) || in_array($key, $to_hide_social)) {
          unset($links[$key]);
      }
    }
  }
}

/**
 * Função de callback de acesso personalizada.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 */
function rep_custom_access_callback(AccountInterface $account) {
  // Verifica se o utilizador possui o papel 'content_editor'.
  $has_content_editor = $account->hasRole('content_editor');

  // Verifica se o utilizador NÃO possui o papel 'administrator'.
  $is_not_administrator = !$account->hasRole('administrator');

  if ($has_content_editor && $is_not_administrator) {
    return AccessResult::allowed()->cachePerUser();
  }

  return AccessResult::forbidden()->cachePerUser();
}


/* Implements hook_file_download().
 *
 * Allow authenticated users to download images from private://resources/.
 *
 * @param string $uri
 *   The file URI being requested.
 *
 * @return array|int
 *   An empty array to allow access or -1 to deny.
 */
function rep_file_download($uri) {
  if (strpos($uri, 'private://resources/') === 0) {
    if (\Drupal::currentUser()->isAuthenticated()) {
      $extension = pathinfo($uri, PATHINFO_EXTENSION);

      if (strtolower($extension) === 'pdf') {
        return [
          'Content-Type' => 'application/pdf',
        ];
      }
      else {
        return [
          'Content-Type' => 'image/jpeg',
        ];
      }
    }
    else {
      return -1;
    }
  }
  return -1;
}

function rep_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'rep/rep_js_css';
}

/**
 * Implements hook_user_login().
 */
function rep_user_login(\Drupal\Core\Session\AccountInterface $account) {
  $user = \Drupal\user\Entity\User::load($account->id());
  $username = $user->getAccountName();
  $repo_instance = \Drupal::request()->getHost();
  $project_id = 'hascorepo';

  $client = \Drupal::httpClient();
  try {
    $response = $client->get('http://192.168.1.169/sguser/account/terms-status', [
      'query' => [
        'acc_id' => $username,
        'acc_repo_instance' => $repo_instance,
        'project_id' => $project_id,
      ],
    ]);

    $data = json_decode($response->getBody(), TRUE);

    if (empty($data['accepted']) || !$data['accepted']) {
      \Drupal::messenger()->addWarning(t('Tem de aceitar os Termos de Uso para continuar.'));
      \Drupal::service('session')->set('terms_pending', TRUE);
    }
  } catch (\Exception $e) {
    \Drupal::logger('rep')->error('Erro ao verificar aceitação dos termos: @msg', ['@msg' => $e->getMessage()]);
  }
}

/**
 * Redirects to terms acceptance page if terms are pending.
 */
function rep_page_top(&$page_top) {
  $current_user = \Drupal::currentUser();

  if ($current_user->isAuthenticated()) {
    $session = \Drupal::service('session');
    $current_path = \Drupal::service('path.current')->getPath();

    if ($session->get('terms_pending') === TRUE && $current_path !== '/terms-aceptance') {
      $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/terms-aceptance');
      $response->send();
      exit;
    }
  }
}