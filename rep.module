<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Path\AliasStorageInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_install().
 */
function rep_install() {
  // Define the schema for user_tracking table.
  $schema['user_tracking'] = [
    'description' => 'Stores user session history',
    'fields' => [
      'uid' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'User ID',
      ],
      'previous_url' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Previous URL',
      ],
      'current_url' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Current URL',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Timestamp when the entry was created',
      ],
    ],
    'primary key' => ['uid', 'current_url'],
  ];

  // Create the table.
  Database::getConnection()->schema()->createTable('user_tracking', $schema['user_tracking']);
}

/**
 * Implements hook_form_alter().
 */
function rep_form_alter(&$form, &$form_state, $form_id) {
  // Check if the form ID matches your configuration form.
  if ($form_id == 'rep_form_namespace' ||
      $form_id == 'rep_form_preferred_names' ||
      $form_id == 'rep_form_update_namespace') {
      // Remove the default "Save configuration" button.
    unset($form['actions']['submit']);
  }
}

/**
 * Implements hook_menu_alter().
 */
/*
function rep_menu_alter(&$items) {
  // Change the title of the menu item with path 'node/1/edit'.
  if (isset($items['node/1/edit'])) {
    $items['node/1/edit']['title'] = 'Edit Article';
  }
}
*/

/**
 * Implements hook_theme
 */
function rep_theme($existing, $type, $theme, $path)
{
    return [
        'list-page' => [
            'variables' => array(
                'items' => array(
                    'offset' => '',
                    'first' => '',
                    'last' => '',
                    'previous' => '',
                    'next' => '',
                    'links' => array(),
                    'title' => ''
                )
            )
        ],
    ];
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function rep_preprocess_block(&$variables) {
  // Add the core/drupal.dialog.ajax library.
  $variables['#attached']['library'][] = 'core/drupal.dialog.ajax';
  $attachments['#attached']['library'][] = 'rep/rep_js_css';
}

/**
 * Implements hook_help().
 */
function rep_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
    switch ($route_name) {
      case 'rep.help':
        return '<h2>This is the help content for the HAScO Semantics Package.</h2>';
    }
  }

/**
 * Implements hook_update_N().
 */
function rep_update_8001() {

  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/rep/list/instrument/_/_/1/12')->save();

}

/**
 * Implementa hook_menu_links_discovered_alter().
 */
function rep_menu_links_discovered_alter(&$links) {
  $target_links = [
    'reviewer.top_level',
    'reviewer.response_options',
  ];

  foreach ($target_links as $link_key) {
    if (isset($links[$link_key])) {
      // Define o requisito de acesso personalizado.
      $links[$link_key]['requirements']['_custom_access_check'] = 'TRUE';
    }
  }
}

/**
 * Função de callback de acesso personalizada.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   A conta do usuário.
 *
 * @return \Drupal\Core\Access\AccessResultInterface
 *   O resultado do acesso.
 */
function rep_custom_access_callback(AccountInterface $account) {
  // Verifica se o utilizador possui o papel 'content_editor'.
  $has_content_editor = $account->hasRole('content_editor');

  // Verifica se o utilizador NÃO possui o papel 'administrator'.
  $is_not_administrator = !$account->hasRole('administrator');

  if ($has_content_editor && $is_not_administrator) {
    return AccessResult::allowed()->cachePerUser();
  }

  return AccessResult::forbidden()->cachePerUser();
}

/**
 * Implements hook_file_download().
 *
 * Allow authenticated users to download images from private://resources/.
 *
 * @param string $uri
 *   The file URI being requested.
 *
 * @return array|int
 *   An empty array to allow access or -1 to deny.
 */
// function rep_file_download($uri) {
//   // Check if the URI starts with "private://resources/".
//   if (strpos($uri, 'private://resources/') === 0) {
//     if (\Drupal::currentUser()->isAuthenticated()) {
//       return [
//         'Content-Type' => 'image/jpeg',
//       ];
//     }
//     else {
//       return -1;
//     }
//   }
//   return -1;
// }
function rep_file_download($uri) {
  // Verifica se o URI começa com "private://resources/"
  if (strpos($uri, 'private://resources/') === 0) {
    if (\Drupal::currentUser()->isAuthenticated()) {
      // Obtém a extensão do arquivo
      $extension = pathinfo($uri, PATHINFO_EXTENSION);

      // Verifica se a extensão é 'pdf'
      if (strtolower($extension) === 'pdf') {
        return [
          'Content-Type' => 'application/pdf',
        ];
      }
      // Caso contrário, retorna como imagem JPEG (ou outro tipo que você desejar)
      else {
        return [
          'Content-Type' => 'image/jpeg',
        ];
      }
    }
    else {
      return -1;
    }
  }
  return -1;
}




